#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 26 15:01:46 2019
@author: Tom
"""
import requests
import re

# Ask how many ORFs the user wants to use
n = input('Input the number of ORFs you would like to use')

IDs = {}    # A dictionary of GenBank IDs (Keys) and BASIC part names (Values)
BASICs = {} # A dictionary of BASIC part names (Keys) and BASIC sequence (Values)

# Ask for each GenBank ID and use it as a Key for the BASIC part name
for i in range(int(n)):
    ID  = input('Enter the Ensembl ID of ORF {}: '.format(i+1))
    Key = input('And now an identifying 3 letter short code: ')
    IDs[ID] ='BASIC_'+ Key + '_ORF'
    
# Retrieve the ORF sequences from GenBank and format as a single string of nucleotides (FAFF!)
server = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&id='
for ID in IDs:
    r = requests.get(server +ID+'&rettype=fasta').content.decode('utf-8')
    l = len(r)  
    s = ''
    p1 = re.compile('[AGCT]{70}')
    p2 = re.compile('\n\n')
    p3 = re.compile('\n')  
    for match1 in re.finditer(p1,r):
        index = match1.start(0)
        s += r[index:index+70]
    for match2 in re.finditer(p2,r):
        for match3 in re.finditer(p3,r[l-20:l-5]):
            index2 = match2.start(0)
            index3 = match3.start(0)+len(r)-20
            x = r[index3+2:index2]
        s += x
    BASICs[IDs[ID]] = s

# Say a Lactase gene was imported, with the short code 'LAC', the sequence would be indexed by BASICs['BASIC_LAC_ORF']


#Search for inframe, or cryptic BasI sites, and switch the codons while conserving AAs
    
BsaI = 'GGTCTC'
BsaI_site = re.compile(BsaI)
BsaIcom = 'GAGACC'
BsaIcom_site = re.compile(BsaIcom)

for key in BASICs :
    sequence = BASICs[key]
    for match in re.finditer(BsaI_site,sequence):
        index = match.start(0)
        if index % 3 == 0:
            sequence = sequence[0 : index + 2] + 'C' + sequence[index + 3 :]
        elif index  % 3 == 1: 
            sequence = sequence[0: index + 4] + 'C' + sequence[index + 5:]
        elif index % 3 == 2:
            sequence = sequence[0: index + 3] + 'T' + sequence[index + 4:]
    for match in re.finditer(BsaIcom_site, sequence):
        index = match.start(0)
        if index % 3 == 0:
            sequence = sequence[0 : index + 2] + 'A' + sequence[index + 3 :]
        elif index  % 3 == 1: 
            sequence = sequence[0: index + 3] + 'G' + sequence[index + 4:]
        elif index % 3 == 2:
            sequence = sequence[0: index + 3] + 'T' + sequence[index + 4:] 
    BASICs.update({key:'TCTGGTGGGTCTCTGTCC' + sequence + 'GGCTCGGGAGACCTATCG'})
            
#Ask user to input desired ratio
print('Input the desired ratio between your GOIs as three integers between 1 and 100, with the most expressed'
      'gene as close to 100 as possible. For example, for a desired ratio of 1:5:10, input the numbers 10, 50 and 100'
      'For a ratio of 0.5:2:7, input 5, 20 and 70. Enter one number at a time, in the same order as the ORFs,'
      'hitting enter between each.')

ratio = []

for i in range(int(n)):
    value = input('Enter integer {} '.format(i+1))
    ratio.append(int(value))

    
RBS_lib = {1:'N6',2:'N2',15:'N9',21:'N1',35:'N8',48:'N3',55:'RBS2',70:'N7',100:'RBS3'}
RBS_outputs = [1,2,15,21,35,48,55,70,100]
output_ratio = []
RBSs = {}

for r in ratio:
    x,i = r,1
    j,k = 0,0
    while not x in RBS_outputs:
        x += i
        j += 1
    x,i = r,1
    while not x in RBS_outputs:
        x -= i
        k += 1
    if j < k:
        r = r + j
    else:
        r = r - k
    output_ratio.append(r)

for r in output_ratio:
    RBSs[r] = RBS_lib[r]
    
#RBSs is now a library of which RBSs are to be used in the same order as the genes were inputed.   


        
        
