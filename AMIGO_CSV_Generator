#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 26 15:01:46 2019
@author: Tom
"""
import requests
import re

# Ask how many ORFs the user wants to use
n = input('Input the number of ORFs you would like to use')

IDs = {}    # A dictionary of BASIC part names (Keys) and Ensembl IDs (Values)
BASICs = {} # A dictionary of BASIC part names (Keys) and BASIC sequence (Values)

# Ask for each Ensembl ID and add it to the IDs list
for i in range(int(n)):
    ID  = input('Enter the Ensembl ID of ORF {}: '.format(i+1))
    Key = input('And now an identifying 3 letter short code: ')
    IDs[ID] = 'BASIC_'+ Key + '_ORF'
    
# Retrieve the ORF sequence from Ensembl and add BASIC iP/iS 
server = "https://rest.ensembl.org"
for ID in IDs:
    r = requests.get(server+'/sequence/id/'+ID,headers={"Content-type" : "text/plain"})
    #search sequence for BsaI sites
    #replace any BsaI sites without changing amino acids- might have trouble with frame reading but should be able to just replace codons
    #search new sequence again to check its now fixed
    BASICs[IDs[ID]] = 'TCTGGTGGGTCTCTGTCC' + r.text + 'GGCTCGGGAGACCTATCG' 

# Say a lactase gene was imported, with the short code 'LAC', the sequence would be indexed by BASICs['BASIC_LAC_ORF']

#The below checks for BsaI restriction sites in the BASIC sequences, and switches codons (keeping AAs the same)
#If the BsaI site is inframe, 'GGT CTC' is changed to 'GGC CTC'
#If the BsaI site is 1 step out of frame, 'NGG TCT CNN' is changed to 'NGG TCC CNN'
#If the BsaI site is 2 steps out, 'NNG GTC TCN' is changed to 'NNG GTT TCN'
BsaI = 'GGTCTC'
BsaI_site = re.compile(BsaI)

for key in BASICs :
    sequence = BASICs[key]
    for match in re.finditer(BsaI_site,sequence):
        index = match.start(0)
        if index % 3 == 0:
            sequence = sequence[0 : index + 2] + 'C' + sequence[index + 3 :]
        elif index  % 3 == 1: 
            sequence = sequence[0: index + 4] + 'C' + sequence[index + 4:]
        elif index % 3 == 2:
            sequence = sequence[0: index + 3] + 'T' + sequence[index + 3:]
            
        
